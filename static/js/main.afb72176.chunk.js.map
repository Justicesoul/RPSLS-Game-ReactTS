{"version":3,"sources":["components/Form.tsx","components/History.tsx","components/AfterGame.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Form","inputName","setInputName","selectGameMode","setSelectGameMode","gameMode","setCloseModal","useState","countdownToStart","setCountdownToStart","useSound","playCountdown","useEffect","interval","setInterval","clearInterval","className","onSubmit","e","preventDefault","replaceAll","length","randomSelection","Math","floor","random","toString","setTimeout","clearTimeout","type","placeholder","value","maxLength","onChange","target","console","log","map","bestOf","winnerByFrames","src","alt","History","playAgain","backToSetup","setGameHistory","history","JSON","parse","localStorage","getItem","stringify","onClick","setItem","game","AfterGame","userScore","botScore","setUserScore","setBotScore","setRobotImg","setSoundVolume","setSoundVolumeFireplace","stopSound","playFireplace","resultWon","setResultWon","openHistory","setOpenHistory","clickHandlerPlayAgain","clickHandlerBackToSetup","document","location","reload","gameEvents","name","imgSrc","App","closeModal","robotImg","userSelectEvent","setUserSelectEvent","botSelectEvent","setBotSelectEvent","gameStart","setGameStart","soundVolume","soundVolumeFireplace","saved","gameHistory","playClick","playWin","stop","volume","playLose","currentdate","Date","datetime","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","gameModeState","parseInt","botEventGenerator","afterGame","frame","toast","success","error","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","transition","Zoom","pauseOnFocusLoss","draggable","pauseOnHover","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.afb72176.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport useSound from 'use-sound';\r\n\r\ntype FormProps = {\r\n  inputName: string;\r\n  setInputName: (arr: string) => void;\r\n  selectGameMode: string;\r\n  setSelectGameMode: (arr: string) => void;\r\n  gameMode: {\r\n    winnerByFrames: number;\r\n    bestOf: string;\r\n  }[];\r\n  setCloseModal: (arr: boolean) => void;\r\n};\r\n\r\nconst Form: React.FC<FormProps> = ({\r\n  inputName,\r\n  setInputName,\r\n  selectGameMode,\r\n  setSelectGameMode,\r\n  gameMode,\r\n  setCloseModal,\r\n}) => {\r\n  const [countdownToStart, setCountdownToStart] = useState(false);\r\n  const [playCountdown] = useSound('/countdown.wav');\r\n\r\n  const submit = (e: React.ChangeEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    setCountdownToStart(true);\r\n\r\n    if (inputName.replaceAll(/\\s/g, '').length === 0) {\r\n      setInputName('Am i a robot?');\r\n    }\r\n    if (selectGameMode === '' || selectGameMode === '0') {\r\n      const randomSelection = Math.floor(Math.random() * gameMode.length + 1);\r\n      setSelectGameMode(randomSelection.toString());\r\n    }\r\n    const interval = setTimeout(() => {\r\n      playCountdown();\r\n    }, 500);\r\n    return () => clearTimeout(interval);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (countdownToStart) {\r\n      const interval = setInterval(() => {\r\n        setCloseModal(true);\r\n      }, 4180);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [countdownToStart]);\r\n\r\n  return (\r\n    <>\r\n      {!countdownToStart && (\r\n        <form className=\"form\" onSubmit={submit}>\r\n          <h2>Select game mode</h2>\r\n          <label>\r\n            Enter your name\r\n            <input\r\n              className=\"form__label\"\r\n              type=\"text\"\r\n              placeholder=\"Name\"\r\n              value={inputName}\r\n              maxLength={18}\r\n              onChange={(e) => {\r\n                setInputName(e.target.value);\r\n              }}\r\n            />\r\n          </label>\r\n          <label>\r\n            Choose game mode\r\n            <select\r\n              value={selectGameMode}\r\n              onChange={(e) => {\r\n                setSelectGameMode(e.target.value);\r\n                console.log(e.target.value);\r\n              }}\r\n              className=\"form__label margin-bottom\"\r\n            >\r\n              <option value=\"0\">- Random -</option>\r\n              {gameMode.map(({ bestOf, winnerByFrames }) => {\r\n                return (\r\n                  <option key={bestOf} value={winnerByFrames}>\r\n                    {bestOf}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n          </label>\r\n          <button className=\"form__button no-margin\">Let's go!</button>\r\n        </form>\r\n      )}\r\n      {countdownToStart && (\r\n        <img\r\n          className=\"count-down\"\r\n          src=\"https://c.tenor.com/7HFPLm7Rl8oAAAAC/321-count-down.gif\"\r\n          alt=\"count-down\"\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","type HistoryProps = {\r\n  backToSetup: () => void;\r\n  playAgain: () => void;\r\n  setGameHistory: (arr: []) => void;\r\n};\r\n\r\nconst History: React.FC<HistoryProps> = ({\r\n  playAgain,\r\n  backToSetup,\r\n  setGameHistory,\r\n}) => {\r\n  const history = JSON.parse(\r\n    localStorage.getItem('history') || JSON.stringify([])\r\n  );\r\n\r\n  const clearHistory = () => {\r\n    setGameHistory([]);\r\n    localStorage.setItem('history', JSON.stringify([]));\r\n  };\r\n\r\n  return (\r\n    <div className=\"history\">\r\n      <div className=\"history__fireplace\">\r\n        <img\r\n          className=\"history__fireplace--img\"\r\n          src=\"fireplace.gif\"\r\n          alt=\"fireplace\"\r\n        />\r\n      </div>\r\n      <div className=\"buttons__row absolute\">\r\n        <button className=\"form__button\" onClick={playAgain}>\r\n          Play Again\r\n        </button>\r\n        <button className=\"form__button\" onClick={backToSetup}>\r\n          Back to setup\r\n        </button>\r\n        <button className=\"form__button\" onClick={clearHistory}>\r\n          Clear history\r\n        </button>\r\n      </div>\r\n      <div className=\"history__history\">\r\n        <div className=\"history__container\">\r\n          <img className=\"history__frame\" src=\"frame.png\" alt=\"\" />\r\n          <div className=\"history__data\">\r\n            <h4 className=\"history__heading\">Games history:</h4>\r\n            {history.map((game: number[]) => {\r\n              return (\r\n                <h5>\r\n                  {`Date: ${game[2]}`}\r\n                  {game[0] > game[1]\r\n                    ? `, Won ${game[0]}:${game[1]}`\r\n                    : `, Lose ${game[0]}:${game[1]}`}\r\n                </h5>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default History;\r\n","import { useEffect, useState } from 'react';\r\nimport History from './History';\r\n\r\ntype AfterGameProps = {\r\n  botScore: number;\r\n  userScore: number;\r\n  setCloseModal: (arr: boolean) => void;\r\n  setUserScore: (arr: number) => void;\r\n  setBotScore: (arr: number) => void;\r\n  setRobotImg: (arr: string) => void;\r\n  setSoundVolume: (arr: number) => void;\r\n  stopSound: () => void;\r\n  playFireplace: () => void;\r\n  setSoundVolumeFireplace: (arr: number) => void;\r\n  setGameHistory: (arr: []) => void;\r\n};\r\n\r\nconst AfterGame: React.FC<AfterGameProps> = ({\r\n  userScore,\r\n  botScore,\r\n  setCloseModal,\r\n  setUserScore,\r\n  setBotScore,\r\n  setRobotImg,\r\n  setSoundVolume,\r\n  setSoundVolumeFireplace,\r\n  stopSound,\r\n  playFireplace,\r\n  setGameHistory,\r\n}) => {\r\n  const [resultWon, setResultWon] = useState<null | boolean>(null);\r\n  const [openHistory, setOpenHistory] = useState(false);\r\n\r\n  const clickHandlerPlayAgain = () => {\r\n    setCloseModal(true);\r\n    setSoundVolumeFireplace(0);\r\n    setUserScore(0);\r\n    setBotScore(0);\r\n    setRobotImg('robot.jfif');\r\n  };\r\n\r\n  const clickHandlerBackToSetup = () => {\r\n    document.location.reload();\r\n  };\r\n\r\n  const clickHandlerHistory = () => {\r\n    setOpenHistory(true);\r\n    setSoundVolume(0);\r\n    setSoundVolumeFireplace(1);\r\n    stopSound();\r\n    playFireplace();\r\n  };\r\n\r\n  useEffect(() => {\r\n    userScore > botScore ? setResultWon(true) : setResultWon(false);\r\n  }, [userScore, botScore]);\r\n\r\n  return (\r\n    <>\r\n      {!openHistory && (\r\n        <div className=\"after-game\">\r\n          <div className=\"after-game__heading\">\r\n            <h1>{resultWon ? 'You Won!!! :)' : 'You Lose!!! :('}</h1>\r\n          </div>\r\n          <img\r\n            className=\"after-game__img\"\r\n            src={resultWon ? 'congratulations.gif' : 'disappointed.gif'}\r\n            alt=\"\"\r\n          />\r\n          <div className=\"after-game__heading buttons__row\">\r\n            <button className=\"form__button\" onClick={clickHandlerPlayAgain}>\r\n              Play Again\r\n            </button>\r\n            <button className=\"form__button\" onClick={clickHandlerBackToSetup}>\r\n              Back to setup\r\n            </button>\r\n            <button className=\"form__button\" onClick={clickHandlerHistory}>\r\n              Show my history\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {openHistory && (\r\n        <History\r\n          playAgain={clickHandlerPlayAgain}\r\n          backToSetup={clickHandlerBackToSetup}\r\n          setGameHistory={setGameHistory}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AfterGame;\r\n","import { useEffect, useState } from 'react';\r\nimport Form from './components/Form';\r\nimport { ToastContainer, toast, Zoom } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport useSound from 'use-sound';\r\nimport AfterGame from './components/AfterGame';\r\n\r\nconst gameMode = [\r\n  { winnerByFrames: 1, bestOf: 'Best of 1 frame' },\r\n  { winnerByFrames: 2, bestOf: 'Best of 3 frames' },\r\n  { winnerByFrames: 3, bestOf: 'Best of 5 frames' },\r\n  { winnerByFrames: 4, bestOf: 'Best of 7 frames' },\r\n  { winnerByFrames: 5, bestOf: 'Best of 9 frames' },\r\n];\r\n\r\nconst gameEvents = [\r\n  { name: 'lizard', imgSrc: './lizard.png' },\r\n  { name: 'paper', imgSrc: './paper.png' },\r\n  { name: 'rock', imgSrc: './rock.png' },\r\n  { name: 'scissors', imgSrc: './scissors.png' },\r\n  { name: 'spock', imgSrc: './spock.png' },\r\n];\r\n\r\nconst App = () => {\r\n  const [inputName, setInputName] = useState('');\r\n  const [selectGameMode, setSelectGameMode] = useState('');\r\n  const [closeModal, setCloseModal] = useState(false);\r\n  const [robotImg, setRobotImg] = useState('robot.jfif');\r\n  const [userSelectEvent, setUserSelectEvent] = useState('');\r\n  const [botSelectEvent, setBotSelectEvent] = useState('');\r\n  const [userScore, setUserScore] = useState(0);\r\n  const [botScore, setBotScore] = useState(0);\r\n  const [gameStart, setGameStart] = useState(false);\r\n  const [soundVolume, setSoundVolume] = useState(1);\r\n  const [soundVolumeFireplace, setSoundVolumeFireplace] = useState(1);\r\n\r\n  const [gameHistory, setGameHistory] = useState<(number | string)[][]>(() => {\r\n    const saved = localStorage.getItem('history') || '';\r\n    if (saved) {\r\n      return JSON.parse(saved);\r\n    }\r\n    return [];\r\n  });\r\n\r\n  const [playClick] = useSound('/click2.wav');\r\n  const [playWin, { stop }] = useSound(\r\n    'https://www.pacdv.com/sounds/applause-sound/app-9.mp3'\r\n  );\r\n  const [playLose] = useSound('/lose.mp3', { volume: soundVolume });\r\n  const [playFireplace] = useSound('fireplace.mp3', {\r\n    volume: soundVolumeFireplace,\r\n  });\r\n\r\n  const currentdate = new Date();\r\n  const datetime =\r\n    currentdate.getDate() +\r\n    '.' +\r\n    (currentdate.getMonth() + 1) +\r\n    '.' +\r\n    currentdate.getFullYear() +\r\n    ', Time: ' +\r\n    currentdate.getHours() +\r\n    ':' +\r\n    (currentdate.getMinutes() < 10\r\n      ? '0' + currentdate.getMinutes()\r\n      : currentdate.getMinutes()) +\r\n    ':' +\r\n    (currentdate.getSeconds() < 10\r\n      ? '0' + currentdate.getSeconds()\r\n      : currentdate.getSeconds());\r\n\r\n  const notifyWin = () => toast.success('You won a frame! 😎👍');\r\n  const notifyLoss = () => toast.error('You lose a frame! 👎😨');\r\n  const notifyDraw = () => toast(\"It's a draw! 🤖\");\r\n\r\n  const gameModeState = parseInt(selectGameMode, 10);\r\n\r\n  const clickHandler = (value: string) => {\r\n    setUserSelectEvent(value);\r\n    botEventGenerator();\r\n    setGameStart(true);\r\n    playClick();\r\n  };\r\n\r\n  const botEventGenerator = () => {\r\n    const randomSelection =\r\n      gameEvents[Math.floor(Math.random() * gameEvents.length)];\r\n    setBotSelectEvent(randomSelection.name);\r\n    setRobotImg(randomSelection.imgSrc);\r\n  };\r\n\r\n  const afterGame = () => {\r\n    setCloseModal(false);\r\n    setGameHistory([...gameHistory, [userScore, botScore, datetime]]);\r\n    localStorage.setItem('history', JSON.stringify(gameHistory));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const frame = userSelectEvent + botSelectEvent;\r\n    if (\r\n      frame === 'scissorspaper' ||\r\n      frame === 'rockscissors' ||\r\n      frame === 'paperrock' ||\r\n      frame === 'paperlizard' ||\r\n      frame === 'scissorsspock' ||\r\n      frame === 'lizardrock' ||\r\n      frame === 'spockpaper' ||\r\n      frame === 'rockspock' ||\r\n      frame === 'lizardscissors' ||\r\n      frame === 'spocklizard'\r\n    ) {\r\n      setUserScore(userScore + 1);\r\n      notifyWin();\r\n    } else if (\r\n      frame === 'paperscissors' ||\r\n      frame === 'scissorsrock' ||\r\n      frame === 'rockpaper' ||\r\n      frame === 'lizardpaper' ||\r\n      frame === 'spockscissors' ||\r\n      frame === 'rocklizard' ||\r\n      frame === 'paperspock' ||\r\n      frame === 'spockrock' ||\r\n      frame === 'scissorslizard' ||\r\n      frame === 'lizardspock'\r\n    ) {\r\n      setBotScore(botScore + 1);\r\n      notifyLoss();\r\n    } else if (\r\n      frame === 'rockrock' ||\r\n      frame === 'paperpaper' ||\r\n      frame === 'scissorsscissors' ||\r\n      frame === 'lizardlizard' ||\r\n      frame === 'spockspock'\r\n    ) {\r\n      notifyDraw();\r\n    }\r\n    setBotSelectEvent('');\r\n    setUserSelectEvent('');\r\n  }, [botSelectEvent, userSelectEvent]);\r\n\r\n  useEffect(() => {\r\n    if (gameModeState === userScore) {\r\n      afterGame();\r\n      playWin();\r\n    }\r\n    if (gameModeState === botScore) {\r\n      afterGame();\r\n      playLose();\r\n      setSoundVolume(1);\r\n    }\r\n  }, [userScore, botScore]);\r\n\r\n  useEffect(() => {\r\n    if (closeModal) {\r\n      stop();\r\n      setSoundVolume(0);\r\n    }\r\n  }, [closeModal]);\r\n\r\n  return (\r\n    <>\r\n      {!closeModal && !gameStart && (\r\n        <div className=\"container\">\r\n          <Form\r\n            inputName={inputName}\r\n            setInputName={setInputName}\r\n            selectGameMode={selectGameMode}\r\n            setSelectGameMode={setSelectGameMode}\r\n            gameMode={gameMode}\r\n            setCloseModal={setCloseModal}\r\n          />\r\n        </div>\r\n      )}\r\n      {!closeModal && gameStart && (\r\n        <div className=\"container\">\r\n          <AfterGame\r\n            setCloseModal={setCloseModal}\r\n            userScore={userScore}\r\n            playFireplace={playFireplace}\r\n            botScore={botScore}\r\n            setUserScore={setUserScore}\r\n            setBotScore={setBotScore}\r\n            setRobotImg={setRobotImg}\r\n            stopSound={stop}\r\n            setSoundVolume={setSoundVolume}\r\n            setSoundVolumeFireplace={setSoundVolumeFireplace}\r\n            setGameHistory={setGameHistory}\r\n          />\r\n        </div>\r\n      )}\r\n      {closeModal && (\r\n        <>\r\n          <ToastContainer\r\n            position=\"top-center\"\r\n            autoClose={1500}\r\n            hideProgressBar={false}\r\n            newestOnTop={false}\r\n            closeOnClick\r\n            rtl={false}\r\n            transition={Zoom}\r\n            pauseOnFocusLoss\r\n            draggable\r\n            pauseOnHover\r\n          />\r\n          <img className=\"background\" src=\"game.gif\" alt=\"game\" />\r\n\r\n          <div className=\"App\">\r\n            <header>\r\n              <img\r\n                className=\"header__logo\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ad/Pierre_ciseaux_feuille_l%C3%A9zard_spock_aligned.svg/768px-Pierre_ciseaux_feuille_l%C3%A9zard_spock_aligned.svg.png\"\r\n                alt=\"logo\"\r\n              />\r\n              <h1>Rock, paper, scissors, lizard and spock</h1>\r\n            </header>\r\n            <h2>{`Best of ${gameModeState * 2 - 1} ${\r\n              selectGameMode === '1' ? 'frame' : 'frames'\r\n            }`}</h2>\r\n            <h3>{`(to ${selectGameMode} ${\r\n              selectGameMode === '1' ? 'win' : 'wins'\r\n            })`}</h3>\r\n            <main>\r\n              <div className=\"player\">\r\n                <h3 className=\"player__name\">{inputName}</h3>\r\n                {gameEvents.map(({ name, imgSrc }) => {\r\n                  return (\r\n                    <img\r\n                      className={`game-event ${name}`}\r\n                      src={imgSrc}\r\n                      alt={name}\r\n                      title={name}\r\n                      key={name}\r\n                      onClick={() => clickHandler(name)}\r\n                    />\r\n                  );\r\n                })}\r\n                <img\r\n                  className=\"player-options__img\"\r\n                  src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ad/Pierre_ciseaux_feuille_l%C3%A9zard_spock_aligned.svg/768px-Pierre_ciseaux_feuille_l%C3%A9zard_spock_aligned.svg.png\"\r\n                  alt=\"player\"\r\n                />\r\n              </div>\r\n              <span className=\"vs\">\r\n                {selectGameMode === '1' ? 'VS' : `${userScore} : ${botScore}`}\r\n              </span>\r\n              <div className=\"player\">\r\n                <h3 className=\"player__name\">Gamebot 1.0</h3>\r\n                <img\r\n                  className=\"player-options__img robot\"\r\n                  src={robotImg}\r\n                  alt=\"robot\"\r\n                />\r\n              </div>\r\n            </main>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}